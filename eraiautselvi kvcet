{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":239192,"sourceType":"datasetVersion","datasetId":100982}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"provenance":[{"file_id":"1n2vK25AxQC7Jo4okvjxHScZR_lvlRkdb","timestamp":1746713758820},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/scratchpad/bidirectional-lstm-for-hate-speech-classification.b208126b-ae20-410c-a8b6-a59473c7e22e.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250508/auto/storage/goog4_request&X-Goog-Date=20250508T141459Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=4b1bf2c3ad0611ccd672370d5c4f7ec0e054d84dd94c90b69228cec2bfae64543002e61ee33ddf7eefd4d71347c08231c70dfdc6bd33586b26128918c7bfff82142664f1ce2816cdd294218d6a415ce08252ed73d6a9d3fb6346b8f218aca9952841898222079546790eeba21a0eee14110610d9a0cdfee243afee255fd7f4efad7cef7092b0bacdae0a8d3b926a49d84574ea77b6380d9370c10e80245aa9708365f9f3f0822fb45bc4be1f462aafa3c4f2b7ff6bdee15fe162f2de7108d426f1a6f25757f780d7a14cb02f23013bfd99d1e71350d36fb65c5a0e27f77d24f51ae4357348f8b9560f715cca9927c0896243d596e19f263ce4c4fa195300815c","timestamp":1746713711637}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","import kagglehub\n","arkhoshghalb_twitter_sentiment_analysis_hatred_speech_path = kagglehub.dataset_download('arkhoshghalb/twitter-sentiment-analysis-hatred-speech')\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"CqssY0egP_JK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747238338352,"user_tz":-330,"elapsed":6695,"user":{"displayName":"ERAIARUTSELVI SELVI","userId":"11121993723277592134"}},"outputId":"df5d425b-b8b4-4064-c548-a0be8e340019"},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Data source import complete.\n"]}],"execution_count":1},{"cell_type":"markdown","source":["This project aims to classify tweets into Hate Speech (1) and Non-Hate (0) using a Bi-directional LSTM model."],"metadata":{"id":"qKWmtloMP_JO"}},{"cell_type":"code","source":["!pip install contractions textblob\n","!pip install wordsegment\n","!pip install fuzzywuzzy[speedup]"],"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:32.238869Z","iopub.execute_input":"2025-03-28T06:11:32.239332Z","iopub.status.idle":"2025-03-28T06:11:38.293059Z","shell.execute_reply.started":"2025-03-28T06:11:32.23929Z","shell.execute_reply":"2025-03-28T06:11:38.291975Z"},"id":"Sx22zvV1P_JQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747238372845,"user_tz":-330,"elapsed":34435,"user":{"displayName":"ERAIARUTSELVI SELVI","userId":"11121993723277592134"}},"outputId":"992ddfd9-830b-4616-f51c-dcc70df0af88"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting contractions\n","  Downloading contractions-0.1.73-py2.py3-none-any.whl.metadata (1.2 kB)\n","Requirement already satisfied: textblob in /usr/local/lib/python3.11/dist-packages (0.19.0)\n","Collecting textsearch>=0.0.21 (from contractions)\n","  Downloading textsearch-0.0.24-py2.py3-none-any.whl.metadata (1.2 kB)\n","Requirement already satisfied: nltk>=3.9 in /usr/local/lib/python3.11/dist-packages (from textblob) (3.9.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (8.1.8)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (1.5.0)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (2024.11.6)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (4.67.1)\n","Collecting anyascii (from textsearch>=0.0.21->contractions)\n","  Downloading anyascii-0.3.2-py3-none-any.whl.metadata (1.5 kB)\n","Collecting pyahocorasick (from textsearch>=0.0.21->contractions)\n","  Downloading pyahocorasick-2.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n","Downloading contractions-0.1.73-py2.py3-none-any.whl (8.7 kB)\n","Downloading textsearch-0.0.24-py2.py3-none-any.whl (7.6 kB)\n","Downloading anyascii-0.3.2-py3-none-any.whl (289 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m289.9/289.9 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pyahocorasick-2.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (118 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m118.3/118.3 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pyahocorasick, anyascii, textsearch, contractions\n","Successfully installed anyascii-0.3.2 contractions-0.1.73 pyahocorasick-2.1.0 textsearch-0.0.24\n","Collecting wordsegment\n","  Downloading wordsegment-1.3.1-py2.py3-none-any.whl.metadata (7.7 kB)\n","Downloading wordsegment-1.3.1-py2.py3-none-any.whl (4.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m37.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: wordsegment\n","Successfully installed wordsegment-1.3.1\n","Collecting fuzzywuzzy[speedup]\n","  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n","Collecting python-levenshtein>=0.12 (from fuzzywuzzy[speedup])\n","  Downloading python_levenshtein-0.27.1-py3-none-any.whl.metadata (3.7 kB)\n","Collecting Levenshtein==0.27.1 (from python-levenshtein>=0.12->fuzzywuzzy[speedup])\n","  Downloading levenshtein-0.27.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.6 kB)\n","Collecting rapidfuzz<4.0.0,>=3.9.0 (from Levenshtein==0.27.1->python-levenshtein>=0.12->fuzzywuzzy[speedup])\n","  Downloading rapidfuzz-3.13.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n","Downloading python_levenshtein-0.27.1-py3-none-any.whl (9.4 kB)\n","Downloading levenshtein-0.27.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (161 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m161.7/161.7 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n","Downloading rapidfuzz-3.13.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m47.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: fuzzywuzzy, rapidfuzz, Levenshtein, python-levenshtein\n","Successfully installed Levenshtein-0.27.1 fuzzywuzzy-0.18.0 python-levenshtein-0.27.1 rapidfuzz-3.13.0\n"]}],"execution_count":2},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import re\n","import nltk\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","import re\n","import string\n","import nltk\n","from nltk.corpus import stopwords\n","import contractions\n","import re\n","from wordsegment import load as segment_load, segment\n","from functools import lru_cache\n","from collections import Counter\n","import seaborn as sns\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from sklearn.model_selection import train_test_split\n","from sklearn.utils import class_weight\n","import numpy as np\n","from sklearn.feature_extraction.text import CountVectorizer\n","from collections import Counter\n","from sklearn.utils import class_weight\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, Bidirectional, LSTM, Dense, Dropout\n","from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_curve, auc"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:38.294685Z","iopub.execute_input":"2025-03-28T06:11:38.295053Z","iopub.status.idle":"2025-03-28T06:11:53.745817Z","shell.execute_reply.started":"2025-03-28T06:11:38.295015Z","shell.execute_reply":"2025-03-28T06:11:53.744858Z"},"id":"yK7WUExLP_JR","executionInfo":{"status":"ok","timestamp":1747238385640,"user_tz":-330,"elapsed":12783,"user":{"displayName":"ERAIARUTSELVI SELVI","userId":"11121993723277592134"}}},"outputs":[],"execution_count":3},{"cell_type":"code","source":["# Load dataset\n","df = pd.read_csv(\"/kaggle/input/twitter-sentiment-analysis-hatred-speech/train.csv\")\n","df.head()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:53.747752Z","iopub.execute_input":"2025-03-28T06:11:53.748437Z","iopub.status.idle":"2025-03-28T06:11:53.883296Z","shell.execute_reply.started":"2025-03-28T06:11:53.748408Z","shell.execute_reply":"2025-03-28T06:11:53.882529Z"},"id":"I9umWqYJP_JT"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Dataset Summary and Initial Observations"],"metadata":{"id":"AfiMulzcP_JU"}},{"cell_type":"code","source":["print(\"Shape:\", df.shape)\n","print(\"Columns:\", df.columns.tolist())"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:53.884761Z","iopub.execute_input":"2025-03-28T06:11:53.88505Z","iopub.status.idle":"2025-03-28T06:11:53.890515Z","shell.execute_reply.started":"2025-03-28T06:11:53.885026Z","shell.execute_reply":"2025-03-28T06:11:53.889662Z"},"id":"oA9Ixq-SP_JU"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:53.891275Z","iopub.execute_input":"2025-03-28T06:11:53.891559Z","iopub.status.idle":"2025-03-28T06:11:53.913408Z","shell.execute_reply.started":"2025-03-28T06:11:53.891535Z","shell.execute_reply":"2025-03-28T06:11:53.912577Z"},"id":"z5HCAbFUP_JU"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(df['label'].value_counts())\n","print(\"\\nLabel distribution (%):\")\n","print(df['label'].value_counts(normalize=True) * 100)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:53.914232Z","iopub.execute_input":"2025-03-28T06:11:53.914568Z","iopub.status.idle":"2025-03-28T06:11:53.927416Z","shell.execute_reply.started":"2025-03-28T06:11:53.914534Z","shell.execute_reply":"2025-03-28T06:11:53.926574Z"},"id":"J34msqYGP_JV"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["The imbalance seems to be noteable (93% vs 7%)"],"metadata":{"id":"npUHXROAP_JV"}},{"cell_type":"code","source":["df.dtypes"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:53.928334Z","iopub.execute_input":"2025-03-28T06:11:53.928609Z","iopub.status.idle":"2025-03-28T06:11:53.945986Z","shell.execute_reply.started":"2025-03-28T06:11:53.928584Z","shell.execute_reply":"2025-03-28T06:11:53.945185Z"},"id":"POqZsO5hP_JW"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["At least the data type is right"],"metadata":{"id":"hYK4YdSZP_JW"}},{"cell_type":"code","source":["df.sample(5)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:53.948816Z","iopub.execute_input":"2025-03-28T06:11:53.949154Z","iopub.status.idle":"2025-03-28T06:11:53.970079Z","shell.execute_reply.started":"2025-03-28T06:11:53.949122Z","shell.execute_reply":"2025-03-28T06:11:53.969044Z"},"id":"hzyWwQI0P_JW"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["The tweets look messy though. This needs cleaning"],"metadata":{"id":"TrpUG3M-P_JX"}},{"cell_type":"markdown","source":["Known Problems: Serious Class Imbalance (93% non-hate vs 7% hate = skewed learning).\n","\n","This will mess with standard accuracy, so we’ll need precision, recall, F1-score, maybe SMOTE or class weights in modeling.\n","-> Text Cleaning Needed\n","\n","\n","Tweets often contain:\n","- @user\n","- hashtags #topic (we should keep the word as some of them actually has meaning)\n","- emojis, URLs, HTML entities\n","- weird Unicode artifacts\n","- repeated characters (cooouuulll)\n","- Lemmatization / stemming\n","- contractions (e.g., can't)\n","  \n","These need to be cleaned before tokenization."],"metadata":{"id":"zyK8ZJyDP_JX"}},{"cell_type":"markdown","source":["# Text Cleaning: From Raw Tweets to Processable Text"],"metadata":{"id":"lYwaLYlQP_JY"}},{"cell_type":"code","source":["nltk.download('stopwords')\n","stop_words = set(stopwords.words('english'))\n","\n","def clean_tweet(text):\n","    text = str(text).lower()\n","    text = contractions.fix(text)  # Expand contractions\n","    text = re.sub(r'@[\\w]+', '', text)  # Remove @mentions\n","    text = re.sub(r'http\\S+|www.\\S+', '', text)  # Remove URLs\n","    text = re.sub(r'&\\w+;', '', text)  # Remove HTML entities\n","    text = re.sub(r'[^\\x00-\\x7F]+', ' ', text)  # Remove emojis/non-ASCII\n","    text = re.sub(r'\\s+', ' ', text).strip()  # Remove extra whitespace\n","    text = re.sub(rf\"[{re.escape(string.punctuation)}]\", '', text)  # Remove punctuation\n","\n","    # Tokenize and remove stopwords\n","    tokens = text.split()\n","    tokens = [word for word in tokens if word not in stop_words]\n","\n","    return ' '.join(tokens)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:53.971933Z","iopub.execute_input":"2025-03-28T06:11:53.972219Z","iopub.status.idle":"2025-03-28T06:11:54.071448Z","shell.execute_reply.started":"2025-03-28T06:11:53.972192Z","shell.execute_reply":"2025-03-28T06:11:54.070426Z"},"id":"VlE4Kat2P_JY"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df['clean_tweet'] = df['tweet'].apply(clean_tweet)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:54.07239Z","iopub.execute_input":"2025-03-28T06:11:54.072707Z","iopub.status.idle":"2025-03-28T06:11:55.121004Z","shell.execute_reply.started":"2025-03-28T06:11:54.072681Z","shell.execute_reply":"2025-03-28T06:11:55.120052Z"},"id":"qG55uXqZP_JY"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df[['tweet', 'clean_tweet']].sample(10, random_state=42)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:11:55.12186Z","iopub.execute_input":"2025-03-28T06:11:55.122194Z","iopub.status.idle":"2025-03-28T06:11:55.13794Z","shell.execute_reply.started":"2025-03-28T06:11:55.122163Z","shell.execute_reply":"2025-03-28T06:11:55.136994Z"},"id":"c7KwpoTJP_JZ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["Now our tweets are cleaned.\n","Removed:\n","- Mentions (@user), URLs, HTML entities, emojis, punctuation.\n","- Lowercased and tokenized.\n","- Expanded contractions (e.g., “can’t” → “cannot”).\n","- Removed stopwords.\n","\n","Hashtags are kept in general, as many of them actually carry meanings"],"metadata":{"id":"IJRH8MA2P_JZ"}},{"cell_type":"markdown","source":["# Normalization: Fixing Slang, Repetitions, and Word Mashing"],"metadata":{"id":"7pJFo-BSP_JZ"}},{"cell_type":"code","source":["slang_dict = {\n","    \"brb\": \"be right back\",\n","    \"lol\": \"laughing out loud\",\n","    \"lmao\": \"laughing my ass off\",\n","    \"rofl\": \"rolling on the floor laughing\",\n","    \"smh\": \"shaking my head\",\n","    \"idk\": \"i don't know\",\n","    \"tbh\": \"to be honest\",\n","    \"omg\": \"oh my god\",\n","    \"wtf\": \"what the fuck\",\n","    \"wth\": \"what the hell\",\n","    \"btw\": \"by the way\",\n","    \"bff\": \"best friends forever\",\n","    \"ikr\": \"i know right\",\n","    \"fml\": \"fuck my life\",\n","    \"imo\": \"in my opinion\",\n","    \"imho\": \"in my humble opinion\",\n","    \"dm\": \"direct message\",\n","    \"jk\": \"just kidding\",\n","    \"afk\": \"away from keyboard\",\n","    \"asap\": \"as soon as possible\",\n","    \"atm\": \"at the moment\",\n","    \"bday\": \"birthday\",\n","    \"bae\": \"before anyone else\",\n","    \"bc\": \"because\",\n","    \"cya\": \"see you\",\n","    \"ez\": \"easy\",\n","    \"gg\": \"good game\",\n","    \"gm\": \"good morning\",\n","    \"gn\": \"good night\",\n","    \"gr8\": \"great\",\n","    \"hmu\": \"hit me up\",\n","    \"idc\": \"i don't care\",\n","    \"ily\": \"i love you\",\n","    \"luv\": \"love\",\n","    \"jk\": \"just kidding\",\n","    \"k\": \"okay\",\n","    \"kinda\": \"kind of\",\n","    \"l8r\": \"later\",\n","    \"msg\": \"message\",\n","    \"nvm\": \"never mind\",\n","    \"np\": \"no problem\",\n","    \"pls\": \"please\",\n","    \"plz\": \"please\",\n","    \"rn\": \"right now\",\n","    \"sup\": \"what's up\",\n","    \"thx\": \"thanks\",\n","    \"ty\": \"thank you\",\n","    \"u\": \"you\",\n","    \"ur\": \"your\",\n","    \"yo\": \"hello\",\n","    \"ya\": \"you\",\n","    \"wbu\": \"what about you\",\n","    \"wyd\": \"what are you doing\",\n","    \"wya\": \"where you at\",\n","    \"ygm\": \"you got me\",\n","    \"yolo\": \"you only live once\",\n","    \"bday\": \"birthday\",\n","    \"xoxo\": \"hugs and kisses\",\n","    \"rn\": \"right now\",\n","    \"bcuz\": \"because\",\n","    \"g2g\": \"got to go\",\n","    \"nsfw\": \"not safe for work\",\n","    \"nvm\": \"never mind\",\n","    \"ttyl\": \"talk to you later\",\n","    \"omw\": \"on my way\",\n","    \"fam\": \"close friends\",\n","    \"slay\": \"do really well\",\n","    \"drip\": \"fashion style\",\n","    \"cap\": \"lie\",\n","    \"no cap\": \"no lie\",\n","    \"sus\": \"suspicious\",\n","    \"salty\": \"bitter or upset\",\n","    \"flex\": \"show off\",\n","    \"savage\": \"bold or cool\",\n","    \"lit\": \"exciting or fun\",\n","    \"fire\": \"amazing\",\n","    \"goat\": \"greatest of all time\",\n","    \"vibe\": \"atmosphere or feeling\",\n","    \"mood\": \"relatable feeling\",\n","    \"dead\": \"something is very funny\",\n","    \"shade\": \"subtle insult\",\n","    \"stan\": \"overly devoted fan\",\n","    \"clapback\": \"witty comeback\",\n","    \"ship\": \"romantic pairing\",\n","    \"sksksks\": \"expression of excitement\",\n","    \"and i oop\": \"expression of shock or embarrassment\"\n","}"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:06.803565Z","iopub.execute_input":"2025-03-28T06:12:06.803868Z","iopub.status.idle":"2025-03-28T06:12:06.812752Z","shell.execute_reply.started":"2025-03-28T06:12:06.803841Z","shell.execute_reply":"2025-03-28T06:12:06.811623Z"},"id":"KnjDPKj2P_JZ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["ofc idk all the slang ppl use but hey, I tried"],"metadata":{"id":"FFf3_o5RP_Ja"}},{"cell_type":"code","source":["# Load the wordsegment model\n","segment_load()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:06.835573Z","iopub.execute_input":"2025-03-28T06:12:06.835839Z","iopub.status.idle":"2025-03-28T06:12:07.376245Z","shell.execute_reply.started":"2025-03-28T06:12:06.835807Z","shell.execute_reply":"2025-03-28T06:12:07.375186Z"},"id":"e6MbVlSmP_Jb"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# Regex to reduce repeated letters\n","repeat_pattern = re.compile(r'(.)\\1{2,}', re.IGNORECASE)\n","\n","def normalize_tweet(text):\n","    # Fix things like \"y o u\"\n","    text = re.sub(r'(?<=\\s)([a-z])(?:\\s+[a-z]){1,}(?=\\s|$)',\n","                  lambda m: m.group(0).replace(\" \", \"\"), text)\n","\n","    tokens = text.split()\n","    result = []\n","\n","    for token in tokens:\n","        token = repeat_pattern.sub(r'\\1', token.lower())   # reduce \"soooo\" to \"so\"\n","        token = slang_dict.get(token, token)               # replace \"ur\" with \"your\"\n","\n","        # segment if long, likely mashed, and alphabetical\n","        if len(token) > 12 and token.isalpha():\n","            result.extend(segment(token))\n","        else:\n","            result.append(token)\n","\n","    return ' '.join(result)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:07.377149Z","iopub.execute_input":"2025-03-28T06:12:07.377391Z","iopub.status.idle":"2025-03-28T06:12:07.383565Z","shell.execute_reply.started":"2025-03-28T06:12:07.377371Z","shell.execute_reply":"2025-03-28T06:12:07.382625Z"},"id":"o1rz6CY2P_Jc"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df['normalized_tweet'] = df['clean_tweet'].apply(normalize_tweet)\n","df[['tweet', 'clean_tweet', 'normalized_tweet']].sample(10)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:07.384532Z","iopub.execute_input":"2025-03-28T06:12:07.384954Z","iopub.status.idle":"2025-03-28T06:12:27.072821Z","shell.execute_reply.started":"2025-03-28T06:12:07.384919Z","shell.execute_reply":"2025-03-28T06:12:27.07184Z"},"id":"w_PkVmixP_Jc"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["Fixed:\n","- Slang terms (e.g., “ur” → “you are”)\n","- Repeated letters (e.g., “soooo” → “so”)\n","- Mashed-up words using wordsegment (e.g., “iloveyou” → “i love you`)\n","- Spaced letters (e.g., “y o u” → “you”)"],"metadata":{"id":"gAer7oMpP_Jd"}},{"cell_type":"markdown","source":["The tweets now look much nicer. However, the mispronunciation is skipped due to a performance issue. Looping through every single word to check correct spelling is likely impractical"],"metadata":{"id":"U2VxQegUP_Jd"}},{"cell_type":"markdown","source":["# Exploratory Data Analysis (EDA)"],"metadata":{"id":"gECeIC60P_Je"}},{"cell_type":"code","source":["# Class balance check\n","df['label'].value_counts(normalize=True).plot(kind='bar', title='Class Distribution', rot=0)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T07:27:15.901265Z","iopub.execute_input":"2025-03-28T07:27:15.90169Z","iopub.status.idle":"2025-03-28T07:27:16.097629Z","shell.execute_reply.started":"2025-03-28T07:27:15.901655Z","shell.execute_reply":"2025-03-28T07:27:16.096547Z"},"id":"wkjlJsakP_Je"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["As aforementioned, quite messy"],"metadata":{"id":"Y86C-mIuP_Jf"}},{"cell_type":"code","source":["df['tweet_length'] = df['normalized_tweet'].apply(lambda x: len(x.split()))\n","plt.hist(df['tweet_length'], bins=30, edgecolor='black')\n","plt.title('Distribution of Tweet Lengths')\n","plt.xlabel('Number of Words')\n","plt.ylabel('Tweet Count')\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:27.400372Z","iopub.execute_input":"2025-03-28T06:12:27.400661Z","iopub.status.idle":"2025-03-28T06:12:27.655046Z","shell.execute_reply.started":"2025-03-28T06:12:27.400636Z","shell.execute_reply":"2025-03-28T06:12:27.654105Z"},"id":"hR3C-TLJP_Jf"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["It's great that twitter at least has a world limit so we do not have to deal with any notable outliers"],"metadata":{"id":"BCmZpdAiP_Jg"}},{"cell_type":"code","source":["def get_top_words(label, n=20):\n","    texts = df[df['label'] == label]['normalized_tweet']\n","    all_words = ' '.join(texts).split()\n","    return Counter(all_words).most_common(n)\n","\n","print(\"Top words in hate speech:\")\n","print(get_top_words(1))\n","\n","print(\"\\nTop words in non-hate tweets:\")\n","print(get_top_words(0))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:27.655856Z","iopub.execute_input":"2025-03-28T06:12:27.656129Z","iopub.status.idle":"2025-03-28T06:12:27.745065Z","shell.execute_reply.started":"2025-03-28T06:12:27.656106Z","shell.execute_reply":"2025-03-28T06:12:27.744107Z"},"id":"ZoFifum3P_Jg"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["- Top keywords for hate speech: trump, white, black, libtard, like, people.\n","- Top keywords for non-hate: love, day, happy, life, time."],"metadata":{"id":"-hF8ruTDP_Jg"}},{"cell_type":"code","source":["def plot_top_words(label):\n","    words = get_top_words(label)\n","    words_df = pd.DataFrame(words, columns=['word', 'count'])\n","    sns.barplot(x='count', y='word', data=words_df).set_title(f\"Top Words (Label = {label})\")\n","\n","plot_top_words(1)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:27.745957Z","iopub.execute_input":"2025-03-28T06:12:27.746198Z","iopub.status.idle":"2025-03-28T06:12:28.098088Z","shell.execute_reply.started":"2025-03-28T06:12:27.746177Z","shell.execute_reply":"2025-03-28T06:12:28.097124Z"},"id":"DTCkpSV_P_Jh"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["def show_ngrams(label, ngram_range=(2, 2), top_n=15):\n","    texts = df[df['label'] == label]['normalized_tweet']\n","    vectorizer = CountVectorizer(ngram_range=ngram_range, stop_words='english')\n","    X = vectorizer.fit_transform(texts)\n","    counts = X.sum(axis=0).A1\n","    vocab = vectorizer.get_feature_names_out()\n","    ngram_freq = pd.Series(counts, index=vocab).sort_values(ascending=False)[:top_n]\n","    sns.barplot(x=ngram_freq.values, y=ngram_freq.index)\n","    plt.title(f\"Top {ngram_range[0]}-grams (Label={label})\")\n","    plt.show()\n","\n","show_ngrams(1, (2, 2))\n","show_ngrams(0, (2, 2))\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:12:28.099031Z","iopub.execute_input":"2025-03-28T06:12:28.099348Z","iopub.status.idle":"2025-03-28T06:12:29.647299Z","shell.execute_reply.started":"2025-03-28T06:12:28.099324Z","shell.execute_reply":"2025-03-28T06:12:29.646176Z"},"id":"Q81RzN28P_Jh"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["Ok, some more pattern we see. Seems like we are progressing in the right direction\n","Top Bigrams:\n","- Hate speech: sjw liberal, liberal politics, liberal sjw\n","- Non-hate: fathers day, thankful positive, positive affirmation"],"metadata":{"id":"Aougl7c1P_Jh"}},{"cell_type":"markdown","source":["# Tokenization & Sequence Preparation"],"metadata":{"id":"j8ctssj0P_Jh"}},{"cell_type":"code","source":["df_model = df[['normalized_tweet', 'label']].copy()\n","\n","vocab_size = 10000\n","max_length = 50\n","oov_token = \"<OOV>\"\n","\n","tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)\n","tokenizer.fit_on_texts(df_model['normalized_tweet'])\n","\n","sequences = tokenizer.texts_to_sequences(df_model['normalized_tweet'])\n","padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post', truncating='post')\n","labels = np.array(df_model['label'])"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:55:35.862454Z","iopub.execute_input":"2025-03-28T06:55:35.862781Z","iopub.status.idle":"2025-03-28T06:55:37.346747Z","shell.execute_reply.started":"2025-03-28T06:55:35.862753Z","shell.execute_reply":"2025-03-28T06:55:37.34565Z"},"id":"KGjPealxP_Ji"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["- Used Keras Tokenizer (10,000 vocab size)\n","- Padded sequences to max length of 50 tokens."],"metadata":{"id":"_T_9C85uP_Jj"}},{"cell_type":"code","source":["\n","X_train, X_val, y_train, y_val = train_test_split(\n","    padded_sequences, labels, test_size=0.2, random_state=42, stratify=labels\n",")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:55:37.347897Z","iopub.execute_input":"2025-03-28T06:55:37.348242Z","iopub.status.idle":"2025-03-28T06:55:37.369774Z","shell.execute_reply.started":"2025-03-28T06:55:37.348201Z","shell.execute_reply":"2025-03-28T06:55:37.368591Z"},"id":"n9OwihNPP_Jj"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Modeling: Bi-Directional LSTM"],"metadata":{"id":"-htL9xaTP_Jj"}},{"cell_type":"markdown","source":["Embedding → Bidirectional LSTM → Dropout → Dense (ReLU) → Dense (Sigmoid)"],"metadata":{"id":"W7ldllTuP_Jk"}},{"cell_type":"code","source":["# Class Weights\n","class_weights = class_weight.compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(y_train),\n","    y=y_train\n",")\n","class_weights = dict(enumerate(class_weights))\n","print(\"Class Weights:\", class_weights)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:55:37.370927Z","iopub.execute_input":"2025-03-28T06:55:37.371216Z","iopub.status.idle":"2025-03-28T06:55:37.382337Z","shell.execute_reply.started":"2025-03-28T06:55:37.371189Z","shell.execute_reply":"2025-03-28T06:55:37.381195Z"},"id":"ewCcWY8wP_Jk"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["embedding_dim = 100\n","\n","model = Sequential([\n","    Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n","    Bidirectional(LSTM(64, return_sequences=False)),\n","    Dropout(0.5),\n","    Dense(32, activation='relu'),\n","    Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(\n","    loss='binary_crossentropy',\n","    optimizer='adam',\n","    metrics=['accuracy']\n",")\n","\n","model.summary()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:55:45.427801Z","iopub.execute_input":"2025-03-28T06:55:45.428152Z","iopub.status.idle":"2025-03-28T06:55:45.482718Z","shell.execute_reply.started":"2025-03-28T06:55:45.428124Z","shell.execute_reply":"2025-03-28T06:55:45.481413Z"},"id":"i04CIuVkP_Jk"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["- Loss: Binary Crossentropy\n","- Optimizer: Adam\n","- Class Weights: Balanced via sklearn.utils.class_weight"],"metadata":{"id":"ZBmI4UIfP_Jl"}},{"cell_type":"code","source":["# Training\n","early_stop = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)\n","\n","history = model.fit(\n","    X_train, y_train,\n","    epochs=10,\n","    batch_size=32,\n","    validation_data=(X_val, y_val),\n","    class_weight=class_weights,\n","    callbacks=[early_stop],\n","    verbose=1\n",")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T06:56:20.76315Z","iopub.execute_input":"2025-03-28T06:56:20.763522Z","iopub.status.idle":"2025-03-28T06:58:58.752439Z","shell.execute_reply.started":"2025-03-28T06:56:20.763461Z","shell.execute_reply":"2025-03-28T06:58:58.751599Z"},"id":"sXplu-_mP_Jl"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["- Epochs: 10 (Early Stopping applied)\n","- Batch Size: 32\n","- Validation Split: 20%"],"metadata":{"id":"DI96KTpDP_Jl"}},{"cell_type":"markdown","source":["# Evaluation"],"metadata":{"id":"pegy3XLBP_Jm"}},{"cell_type":"code","source":["# Evaluation\n","\n","y_pred = (model.predict(X_val) > 0.5).astype(int)\n","print(classification_report(y_val, y_pred))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T07:12:53.909886Z","iopub.execute_input":"2025-03-28T07:12:53.910272Z","iopub.status.idle":"2025-03-28T07:12:56.149944Z","shell.execute_reply.started":"2025-03-28T07:12:53.910236Z","shell.execute_reply":"2025-03-28T07:12:56.148827Z"},"id":"uyNaM08dP_Jm"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["def plot_training_history(history):\n","    plt.figure(figsize=(14, 5))\n","\n","    # Accuracy plot\n","    plt.subplot(1, 2, 1)\n","    plt.plot(history.history['accuracy'], label='Train Acc')\n","    plt.plot(history.history['val_accuracy'], label='Val Acc')\n","    plt.title('Model Accuracy')\n","    plt.xlabel('Epoch')\n","    plt.ylabel('Accuracy')\n","    plt.legend()\n","\n","    # Loss plot\n","    plt.subplot(1, 2, 2)\n","    plt.plot(history.history['loss'], label='Train Loss')\n","    plt.plot(history.history['val_loss'], label='Val Loss')\n","    plt.title('Model Loss')\n","    plt.xlabel('Epoch')\n","    plt.ylabel('Loss')\n","    plt.legend()\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","plot_training_history(history)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T07:13:06.900701Z","iopub.execute_input":"2025-03-28T07:13:06.901059Z","iopub.status.idle":"2025-03-28T07:13:07.453711Z","shell.execute_reply.started":"2025-03-28T07:13:06.901029Z","shell.execute_reply":"2025-03-28T07:13:07.452621Z"},"id":"F9jPVClmP_Jm"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","\n","cm = confusion_matrix(y_val, y_pred)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Not HS', 'Hate Speech'])\n","disp.plot(cmap='Blues')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T07:13:38.717571Z","iopub.execute_input":"2025-03-28T07:13:38.717947Z","iopub.status.idle":"2025-03-28T07:13:38.931362Z","shell.execute_reply.started":"2025-03-28T07:13:38.717918Z","shell.execute_reply":"2025-03-28T07:13:38.930342Z"},"id":"kRllA9u3P_Jn"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["y_probs = model.predict(X_val)\n","fpr, tpr, _ = roc_curve(y_val, y_probs)\n","roc_auc = auc(fpr, tpr)\n","\n","plt.figure(figsize=(6, 6))\n","plt.plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}')\n","plt.plot([0, 1], [0, 1], 'k--')\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('ROC Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T07:13:56.201895Z","iopub.execute_input":"2025-03-28T07:13:56.202294Z","iopub.status.idle":"2025-03-28T07:13:58.587165Z","shell.execute_reply.started":"2025-03-28T07:13:56.202259Z","shell.execute_reply":"2025-03-28T07:13:58.586012Z"},"id":"K-vmzM8IP_Jn"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["- Accuracy & Loss curves show good convergence with minor overfitting.\n","- ROC AUC Curve shows good separation.\n","- Confusion Matrix indicates better recall than precision for hate speech."],"metadata":{"id":"e4ceVcJTP_Jo"}},{"cell_type":"markdown","source":["Possible Improvements:\n","- Add GloVe/Word2Vec embeddings for better word representation.\n","- Try data augmentation or SMOTE for better balancing.\n","- Use BERT or RoBERTa for even better contextual learning."],"metadata":{"id":"WZqpKObvP_Jo"}}]}